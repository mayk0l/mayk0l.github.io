---
// Componente para optimización de imágenes
export interface OptimizedImageProps {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  sizes?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className,
  loading = 'lazy',
  decoding = 'async',
  sizes,
  priority = false
} = Astro.props;

// Generar diferentes formatos y tamaños
const generateSrcSet = (baseSrc: string) => {
  const ext = baseSrc.split('.').pop();
  const baseName = baseSrc.replace(`.${ext}`, '');
  
  // Para imágenes WebP
  const webpSrcSet = [
    `${baseName}-400w.webp 400w`,
    `${baseName}-800w.webp 800w`,
    `${baseName}-1200w.webp 1200w`
  ].join(', ');
  
  // Para imágenes fallback (JPG/PNG)
  const fallbackSrcSet = [
    `${baseName}-400w.${ext} 400w`,
    `${baseName}-800w.${ext} 800w`,
    `${baseName}-1200w.${ext} 1200w`
  ].join(', ');
  
  return { webpSrcSet, fallbackSrcSet };
};

const { webpSrcSet, fallbackSrcSet } = generateSrcSet(src);
const defaultSizes = sizes || '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw';
---

<picture>
  <!-- WebP format for modern browsers -->
  <source 
    srcset={webpSrcSet}
    sizes={defaultSizes}
    type="image/webp"
  />
  
  <!-- Fallback format -->
  <source 
    srcset={fallbackSrcSet}
    sizes={defaultSizes}
    type={`image/${src.split('.').pop()}`}
  />
  
  <!-- Fallback img element -->
  <img 
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={priority ? 'eager' : loading}
    decoding={decoding}
    style={priority ? 'content-visibility: auto; contain-intrinsic-size: auto;' : undefined}
  />
</picture>
