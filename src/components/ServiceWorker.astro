---
// Service Worker Registration Component
export interface ServiceWorkerProps {
  enabled?: boolean;
  path?: string;
}

// Do not allow Service Worker registration in development by default
const { enabled = true, path = '/sw.js' } = Astro.props;
const shouldRegister = enabled && !import.meta.env.DEV;
---

{shouldRegister && (
  <script define:vars={{ path }}>
    // Register Service Worker con mejor manejo de errores
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register(path)
          .then((registration) => {
            console.log('SW registered successfully:', registration);
            
            // Escuchar actualizaciones del SW
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    console.log('Nueva versión del SW disponible');
                    // Opcionalmente mostrar notificación de actualización
                  }
                });
              }
            });
          })
          .catch((registrationError) => {
            console.warn('SW registration failed:', registrationError);
            // No bloquear la aplicación si el SW falla
          });
      });

      // Manejar mensajes del Service Worker (solo en producción)
      navigator.serviceWorker.addEventListener('message', (event) => {
        console.log('Mensaje del SW:', event.data);
      });

      // Detectar cuando el SW está controlando la página
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        console.log('SW controller changed');
      });
    } else {
      console.warn('Service Workers no son soportados en este navegador');
    }
    
    // Performance observer for Core Web Vitals
    if ('PerformanceObserver' in window) {
      // Largest Contentful Paint (LCP)
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            console.log('LCP:', entry.startTime);
          }
        }
      }).observe({ entryTypes: ['largest-contentful-paint'] });
      
      // First Input Delay (FID)
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (entry.entryType === 'first-input') {
            console.log('FID:', entry.processingStart - entry.startTime);
          }
        }
      }).observe({ entryTypes: ['first-input'] });
      
      // Cumulative Layout Shift (CLS)
      let clsValue = 0;
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
          }
        }
        console.log('CLS:', clsValue);
      }).observe({ entryTypes: ['layout-shift'] });
    }
  </script>
)}
